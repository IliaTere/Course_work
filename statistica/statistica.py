import numpy as np
import pandas as pd
from scipy import stats

def load_numbers(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞: txt, csv)."""
    try:
        if file_path.endswith('.csv'):
            data = pd.read_csv(file_path, header=None).values.flatten()
        else:  # txt –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
            with open(file_path, 'r') as file:
                data = [float(line.strip()) for line in file if line.strip()]
        return np.array(data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def calculate_statistics(data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏."""
    if data is None or len(data) == 0:
        return None
    
    stats_dict = {
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª": len(data),
        "–°—Ä–µ–¥–Ω–µ–µ": np.mean(data),
        "–ú–µ–¥–∏–∞–Ω–∞": np.median(data),
        "–ú–∏–Ω–∏–º—É–º": np.min(data),
        "–ú–∞–∫—Å–∏–º—É–º": np.max(data),
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": np.std(data),
        "–î–∏—Å–ø–µ—Ä—Å–∏—è": np.var(data),
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏": (np.std(data) / np.mean(data)) * 100 if np.mean(data) != 0 else np.nan,
        "–ê—Å–∏–º–º–µ—Ç—Ä–∏—è": stats.skew(data),
        "–≠–∫—Å—Ü–µ—Å—Å": stats.kurtosis(data),
        "25-–π –ø–µ—Ä—Å–µ–Ω—Ç–∏–ª—å": np.percentile(data, 25),
        "75-–π –ø–µ—Ä—Å–µ–Ω—Ç–∏–ª—å": np.percentile(data, 75),
    }
    return stats_dict

def print_statistics(stats_dict):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    if not stats_dict:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
    for key, value in stats_dict.items():
        if isinstance(value, float):
            print(f"{key}: {value:.4f}")
        else:
            print(f"{key}: {value}")

if __name__ == "__main__":
    file_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, data.txt): ").strip()
    data = load_numbers(file_path)
    
    if data is not None:
        stats_results = calculate_statistics(data)
        print_statistics(stats_results)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
        save_csv = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV? (y/n): ").lower()
        if save_csv == 'y':
            pd.DataFrame.from_dict(stats_results, orient='index', columns=['–ó–Ω–∞—á–µ–Ω–∏–µ']).to_csv('statistics.csv')
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'statistics.csv'.")